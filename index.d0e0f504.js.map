{"mappings":"ACKA,IAAM,EAAQ,SAAS,aAAa,CAAC,gBAC/B,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBAE5C,SAAS,IACP,IAAM,EAAO,EAAM,oBAAoB,CAAC,MAClC,EACJ,EAAK,MAAM,CAAG,EAAI,CAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,MAAM,MAAM,CAAG,EAEhE,MAAO,CACL,YAAa,EAAK,MAAM,CACxB,eAAgB,CAClB,CACF,CAEA,IAAM,EAAqB,WACzB,IAAwC,EAAA,IAAhC,EAAgC,EAAhC,WAAA,CAAa,EAAmB,EAAnB,cAArB,AAEA,CAAA,EAAU,QAAQ,CAAG,GAvBL,GAwBhB,EAAU,QAAQ,CAAG,GAvBL,EAwBhB,EAAa,QAAQ,CAAG,GAzBR,GA0BhB,EAAa,QAAQ,CAAG,GAzBR,CA0BlB,EA8CA,EAAU,gBAAgB,CAAC,QA5CZ,WACb,IAAwC,EAAA,IAAhC,EAAgC,EAAhC,cAAA,CAER,GAAI,AAFoC,EAAhB,WAAxB,CA9BgB,GAgCa,CAG3B,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAgB,IAClC,EAAO,UAAU,GAEnB,GACF,CACF,GAkCA,EAAU,gBAAgB,CAAC,QAhCT,WACQ,IAAhB,WAAR,CA1CgB,IA6Cd,EAAM,SAAS,CAAC,IAChB,IAEJ,GA0BA,EAAa,gBAAgB,CAAC,QAxBZ,WAGhB,GAAI,AAFuB,IAAnB,cAAR,CApDgB,GAsDgB,CACzB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAgBA,EAAa,gBAAgB,CAAC,QAdT,WAGnB,GAAI,AAFuB,IAAnB,cAAR,CA9DgB,EAgEgB,CACzB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAOA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar MAX_COUNT = 10;\nvar MIN_COUNT = 2;\nvar field = document.querySelector(\".field tbody\");\nvar appendRow = document.querySelector(\".append-row\");\nvar removeRow = document.querySelector(\".remove-row\");\nvar appendColumn = document.querySelector(\".append-column\");\nvar removeColumn = document.querySelector(\".remove-column\");\nfunction getCurrentCounts() {\n    var rows = field.getElementsByTagName(\"tr\");\n    var columns = rows.length > 0 ? rows[0].getElementsByTagName(\"td\").length : 0;\n    return {\n        currentRows: rows.length,\n        currentColumns: columns\n    };\n}\nvar updateButtonStates = function() {\n    var _getCurrentCounts = getCurrentCounts(), currentRows = _getCurrentCounts.currentRows, currentColumns = _getCurrentCounts.currentColumns;\n    appendRow.disabled = currentRows >= MAX_COUNT;\n    removeRow.disabled = currentRows <= MIN_COUNT;\n    appendColumn.disabled = currentColumns >= MAX_COUNT;\n    removeColumn.disabled = currentColumns <= MIN_COUNT;\n};\nvar addRow = function() {\n    var _getCurrentCounts = getCurrentCounts(), currentColumns = _getCurrentCounts.currentColumns, currentRows = _getCurrentCounts.currentRows;\n    if (currentRows < MAX_COUNT) {\n        var newRow = field.insertRow();\n        for(var i = 0; i < currentColumns; i++)newRow.insertCell();\n        updateButtonStates();\n    }\n};\nvar deleteRow = function() {\n    var currentRows = getCurrentCounts().currentRows;\n    if (currentRows > MIN_COUNT) {\n        field.deleteRow(-1);\n        updateButtonStates();\n    }\n};\nvar addColumn = function() {\n    var currentColumns = getCurrentCounts().currentColumns;\n    if (currentColumns < MAX_COUNT) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = field.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonStates();\n    }\n};\nvar deleteColumn = function() {\n    var currentColumns = getCurrentCounts().currentColumns;\n    if (currentColumns > MIN_COUNT) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = field.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonStates();\n    }\n};\nappendRow.addEventListener(\"click\", addRow);\nremoveRow.addEventListener(\"click\", deleteRow);\nappendColumn.addEventListener(\"click\", addColumn);\nremoveColumn.addEventListener(\"click\", deleteColumn);\nupdateButtonStates();\n\n//# sourceMappingURL=index.d0e0f504.js.map\n","'use strict';\n\nconst MAX_COUNT = 10;\nconst MIN_COUNT = 2;\n\nconst field = document.querySelector('.field tbody');\nconst appendRow = document.querySelector('.append-row');\nconst removeRow = document.querySelector('.remove-row');\nconst appendColumn = document.querySelector('.append-column');\nconst removeColumn = document.querySelector('.remove-column');\n\nfunction getCurrentCounts() {\n  const rows = field.getElementsByTagName('tr');\n  const columns =\n    rows.length > 0 ? rows[0].getElementsByTagName('td').length : 0;\n\n  return {\n    currentRows: rows.length,\n    currentColumns: columns,\n  };\n}\n\nconst updateButtonStates = () => {\n  const { currentRows, currentColumns } = getCurrentCounts();\n\n  appendRow.disabled = currentRows >= MAX_COUNT;\n  removeRow.disabled = currentRows <= MIN_COUNT;\n  appendColumn.disabled = currentColumns >= MAX_COUNT;\n  removeColumn.disabled = currentColumns <= MIN_COUNT;\n};\n\nconst addRow = () => {\n  const { currentColumns, currentRows } = getCurrentCounts();\n\n  if (currentRows < MAX_COUNT) {\n    const newRow = field.insertRow();\n\n    for (let i = 0; i < currentColumns; i++) {\n      newRow.insertCell();\n    }\n    updateButtonStates();\n  }\n};\n\nconst deleteRow = () => {\n  const { currentRows } = getCurrentCounts();\n\n  if (currentRows > MIN_COUNT) {\n    field.deleteRow(-1);\n    updateButtonStates();\n  }\n};\n\nconst addColumn = () => {\n  const { currentColumns } = getCurrentCounts();\n\n  if (currentColumns < MAX_COUNT) {\n    for (const row of field.rows) {\n      row.insertCell();\n    }\n    updateButtonStates();\n  }\n};\n\nconst deleteColumn = () => {\n  const { currentColumns } = getCurrentCounts();\n\n  if (currentColumns > MIN_COUNT) {\n    for (const row of field.rows) {\n      row.deleteCell(-1);\n    }\n    updateButtonStates();\n  }\n};\n\nappendRow.addEventListener('click', addRow);\nremoveRow.addEventListener('click', deleteRow);\nappendColumn.addEventListener('click', addColumn);\nremoveColumn.addEventListener('click', deleteColumn);\n\nupdateButtonStates();\n"],"names":["field","document","querySelector","appendRow","removeRow","appendColumn","removeColumn","getCurrentCounts","rows","getElementsByTagName","columns","length","currentRows","currentColumns","updateButtonStates","_getCurrentCounts","disabled","addEventListener","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.d0e0f504.js.map"}